import java.util.concurrent.Semaphore;
public class Main {
    public static class Filosofo implements Runnable {
        private int index;
        private int n;
        private Semaphore[] forks;
        public Filosofo(int index, Semaphore[] forks) {
            this.index = index;
            this.n = forks.length;
            this.forks = forks;
        }
        private int left() {
            return index;
        }
        private int right() {
            return (index + 1) % n;
        }
        private boolean isLeftie() {
            return (index % 2) == 0;
        }
        public void getForks() {
            try {
                if (isLeftie()) {
                    forks[right()].acquire();
                    forks[left()].acquire();
                } else {
                    forks[left()].acquire();
                    forks[right()].acquire();
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        public void putForks() {
            if (isLeftie()) {
                forks[right()].release();
                forks[left()].release();
            } else {
                forks[left()].release();
                forks[right()].release();
            }
        }
        public void run() {
            while (true) {
                think();
                getForks();
                eat();
                putForks();
            }
        }
        private void think() {
            try {
                System.out.println("Fil칩sofo " + this.index + " est치 pensando");
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        private void eat() {
            try {
                System.out.println("Fil칩sofo " + this.index + " est치 comendo");
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
    public static void main(String[] args) {
        int numFilosofos = 5;
        Semaphore[] semas = new Semaphore[numFilosofos];
        for (int i = 0; i < numFilosofos; i++) {
            semas[i] = new Semaphore(1);
        }
        Filosofo[] filos = new Filosofo[numFilosofos];
        for (int i = 0; i < numFilosofos; i++) {
            filos[i] = new Filosofo(i, semas);
        }
        for (int i = 0; i < numFilosofos; i++) {
            new Thread(filos[i]).start();
        }
    }
}
